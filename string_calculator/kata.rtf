{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red10\green7\blue7;\red38\green38\blue38;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid101\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{lower-alpha\}.}{\leveltext\leveltemplateid102\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww16180\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs36 \cf2 \expnd0\expndtw0\kerning0
String Calculator
\fs56 \cf3 \expnd0\expndtw0\kerning0
\
\
\pard\pardeftab720

\fs28 \cf3 \expnd0\expndtw0\kerning0
Before you start:\'a0
\fs56 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls1\ilvl0
\fs28 \cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
Try not to read ahead.\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
Do one task at a time.\'a0The trick is to learn to work incrementally.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
Make sure you only test for correct inputs. there is no need to test for invalid inputs for this kata\
\pard\tx720\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Create a simple String calculator with a method int Add(string numbers)\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls2\ilvl1\cf2 \kerning1\expnd0\expndtw0 {\listtext	a.	}\expnd0\expndtw0\kerning0
The method can take 0, 1 or 2 numbers, and will return their sum (for an empty string it will return 0) for example \'93\'94 or \'931\'94 or \'931,2\'94\
\ls2\ilvl1\kerning1\expnd0\expndtw0 {\listtext	b.	}\expnd0\expndtw0\kerning0
Start with the simplest test case of an empty string and move to 1 and two numbers\
\ls2\ilvl1\kerning1\expnd0\expndtw0 {\listtext	c.	}\expnd0\expndtw0\kerning0
Remember to solve things as simply as possible so that you force yourself to write tests you did not think about\
\ls2\ilvl1\kerning1\expnd0\expndtw0 {\listtext	d.	}\expnd0\expndtw0\kerning0
Remember to refactor after each passing test\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Allow the Add method to handle an unknown amount of numbers\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Allow the Add method to handle new lines between numbers (instead of commas).\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls2\ilvl1\cf2 \kerning1\expnd0\expndtw0 {\listtext	a.	}\expnd0\expndtw0\kerning0
the following input is ok:\'a0 \'931\\n2,3\'94\'a0 (will equal 6)\
\ls2\ilvl1\kerning1\expnd0\expndtw0 {\listtext	b.	}\expnd0\expndtw0\kerning0
the following input is NOT\'a0ok:\'a0 \'931,\\n\'94 (not need to prove it - just clarifying)\
\ls2\ilvl1\kerning1\expnd0\expndtw0 {\listtext	c.	}\expnd0\expndtw0\kerning0
Support different delimiters\
\ls2\ilvl1\kerning1\expnd0\expndtw0 {\listtext	d.	}\expnd0\expndtw0\kerning0
to change a delimiter, the beginning of the string will contain a separate line that looks like this:\'a0\'a0 \'93//[delimiter]\\n[numbers\'85]\'94 for example \'93//;\\n1;2\'94 should return three where the default delimiter is \'91;\'92 .\
\ls2\ilvl1\kerning1\expnd0\expndtw0 {\listtext	e.	}\expnd0\expndtw0\kerning0
the first line is optional. all existing scenarios should still be supported\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
Calling Add with a negative number will throw an exception \'93negatives not allowed\'94 - and the negative that was passed.if there are multiple negatives, show all of them in the exception message \uc0\u8232 stop here if you are a beginner. Continue if you can finish the steps so far in less than 30 minutes. \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	5	}\expnd0\expndtw0\kerning0
Numbers bigger than 1000 should be ignored, so adding 2 + 1001 \'a0= 2\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	6	}\expnd0\expndtw0\kerning0
Delimiters can be of any length with the following format:\'a0 \'93//[delimiter]\\n\'94 for example: \'93//[***]\\n1***2***3\'94 should return 6\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	7	}\expnd0\expndtw0\kerning0
Allow multiple delimiters like this:\'a0 \'93//[delim1][delim2]\\n\'94 for example \'93//[*][%]\\n1*2%3\'94 should return 6.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	8	}\expnd0\expndtw0\kerning0
make sure you can also handle multiple delimiters with length longer than one char}